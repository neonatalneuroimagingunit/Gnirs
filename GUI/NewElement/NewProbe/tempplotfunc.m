function tempplotfunc(~,~,GHandle)

landmarkColor = GHandle.Preference.Theme.landmarkColor;
sourceColor = [1 0 0];
detectorColor = [0 0 1];
lineShrinkFactor = 2;
Atlas =  GHandle.TempWindow.SelectedAtlas;

if GHandle.TempWindow.MirrorProbe.Value
    GHandle.TempWindow.Mask.Source = GHandle.TempWindow.Mask.Source(:,end:-1:1) | GHandle.TempWindow.Mask.Source(:,:);
    GHandle.TempWindow.Mask.Detector = GHandle.TempWindow.Mask.Detector(:,end:-1:1) | GHandle.TempWindow.Mask.Detector(:,:);
end
if GHandle.TempWindow.ThresholdDistanceButton.Value
    GHandle.TempWindow.ThresholdDistanceEdit.Enable = 'on';
    GHandle.TempWindow.ChannelList.ColumnEditable(5) = false;
else
    GHandle.TempWindow.ThresholdDistanceEdit.Enable = 'off';
    GHandle.TempWindow.ChannelList.ColumnEditable(5) = true;
end

idxLM = GHandle.TempWindow.Mask.LandMark(:);
idxSrc = GHandle.TempWindow.Mask.Source(:);
idxDet = GHandle.TempWindow.Mask.Detector(:);
xLandMark = reshape(Atlas.LandMarks.coord(:,:,1), [],1);
yLandMark = reshape(Atlas.LandMarks.coord(:,:,2), [],1);
zLandMark = reshape(Atlas.LandMarks.coord(:,:,3), [],1);

scalpMask = GHandle.TempWindow.NewProbeAxes.Children == GHandle.TempWindow.Scalp;

delete(GHandle.TempWindow.NewProbeAxes.Children(~scalpMask))

sourceTag = GHandle.TempWindow.SelectedAtlas.LandMarks.names(GHandle.TempWindow.Mask.Source);
sourcePos = reshape(GHandle.TempWindow.SelectedAtlas.LandMarks.coord(repmat(GHandle.TempWindow.Mask.Source,1,1,3)),[],3);
GHandle.TempWindow.SourceList.String = sourceTag;

detectorTag = GHandle.TempWindow.SelectedAtlas.LandMarks.names(GHandle.TempWindow.Mask.Detector);
detectorPos = reshape(GHandle.TempWindow.SelectedAtlas.LandMarks.coord(repmat(GHandle.TempWindow.Mask.Detector,1,1,3)),[],3);
GHandle.TempWindow.DetectorList.String = detectorTag;

tempData = cell(0,5);

nSource = size(sourceTag,1);
nDetector = size(detectorTag,1);

channelPairsIdx = combvec(1:nSource, 1:nDetector)';
nChannel = size(channelPairsIdx,1);

thresholdDistance = str2double(GHandle.TempWindow.ThresholdDistanceEdit.String);

GHandle.TempWindow.DetectorListTitle.String = ['Detectors (' num2str(nDetector) ')'];
GHandle.TempWindow.SourceListTitle.String = ['Sources (' num2str(nSource) ')'];

for iChannel = 1:1:nChannel
    tempCoordSource = sourcePos(channelPairsIdx(iChannel,1),:);
    tempCoordDetector = detectorPos(channelPairsIdx(iChannel,2),:);
    tempChannelDistance = norm(tempCoordSource-tempCoordDetector);
    
    tempData{iChannel,1} = ['Ch' num2str(iChannel)];
    tempData{iChannel,2} = sourceTag{channelPairsIdx(iChannel,1)};
    tempData{iChannel,3} = detectorTag{channelPairsIdx(iChannel,2)};
    tempData{iChannel,4} = tempChannelDistance;
    if GHandle.TempWindow.ThresholdDistanceButton.Value
        tempData{iChannel,5} = tempChannelDistance <= thresholdDistance;
    else
        maskOldChannel =  strcmp(GHandle.TempWindow.ChannelList.Data(:,2),tempData{iChannel,2}) & strcmp(GHandle.TempWindow.ChannelList.Data(:,3),tempData{iChannel,3});
        if any(maskOldChannel)
            tempData{iChannel,5} = GHandle.TempWindow.ChannelList.Data{maskOldChannel,5};
        else
            tempData{iChannel,5} = true;
        end
    end
end
GHandle.TempWindow.ChannelList.Data = tempData;

if nChannel == 0
    nChannelActive = 0;
else
    nChannelActive = sum([GHandle.TempWindow.ChannelList.Data{:,5}]);
end
GHandle.TempWindow.ChannelListTitle.String = ['Channels (' num2str(nChannel) ' total, ' num2str(nChannelActive) ' active)'];

if  GHandle.TempWindow.ShowLabels.Value
    GHandle.TempWindow.Source = text(sourcePos(:,1),...
        sourcePos(:,2),...
        sourcePos(:,3),...
        sourceTag, ...
        'FontWeight', 'bold', ...
        'FontSize', 10, ...
        'HitTest', 'off', ...
        'Color', sourceColor);
    GHandle.TempWindow.Detector = text(detectorPos(:,1),...
        detectorPos(:,2),...
        detectorPos(:,3),...
        detectorTag, ...
        'FontWeight', 'bold', ...
        'FontSize', 10, ...
        'HitTest', 'off', ...
        'Color', detectorColor);
    if nChannel
        shortIdx = find([GHandle.TempWindow.ChannelList.Data{:,5}]);
        longIdx = setdiff(1:nChannel , shortIdx);
        coordChannel = (sourcePos(channelPairsIdx(:,1),:) + detectorPos(channelPairsIdx(:,2),:))/2;
        
        GHandle.TempWindow.ChannelText(shortIdx) = text(coordChannel(shortIdx,1), coordChannel(shortIdx,2), coordChannel(shortIdx,3), ...
            GHandle.TempWindow.ChannelList.Data(shortIdx,1), ...
            'FontWeight', 'bold', ...
            'FontSize', 10, ...
            'HitTest', 'off', ...
            'Color', 'k');
        GHandle.TempWindow.ChannelText(longIdx) = text(coordChannel(longIdx,1), coordChannel(longIdx,2), coordChannel(longIdx,3), ...
            GHandle.TempWindow.ChannelList.Data(longIdx,1), ...
            'FontWeight', 'bold', ...
            'FontSize', 10, ...
            'HitTest', 'off', ...
            'Color', 'k', ...
            'Visible', 'off');
    end
end

if nChannel
    tempVector = sourcePos(channelPairsIdx(:,1),:)-detectorPos(channelPairsIdx(:,2),:);
    tempVersor = tempVector./vecnorm(tempVector,2,2);
    
    tempCoordSourceShrink = sourcePos(channelPairsIdx(:,1),:) - tempVersor.*lineShrinkFactor;
    tempCoordDetectorShrink = detectorPos(channelPairsIdx(:,2),:) + tempVersor.*lineShrinkFactor;
    xChannel = [tempCoordSourceShrink(:,1) tempCoordDetectorShrink(:,1)]';
    yChannel = [tempCoordSourceShrink(:,2) tempCoordDetectorShrink(:,2)]';
    zChannel = [tempCoordSourceShrink(:,3) tempCoordDetectorShrink(:,3)]';
    shortIdx = find([GHandle.TempWindow.ChannelList.Data{:,5}]);
    longIdx = setdiff(1:nChannel , shortIdx);
    
    if GHandle.TempWindow.ShowInactive.Value
        longLineStyle = ':';
    else
        longLineStyle = 'none';
    end
    
    GHandle.TempWindow.Channel(shortIdx) = plot3(...
        xChannel(:,shortIdx), ...
        yChannel(:,shortIdx), ...
        zChannel(:,shortIdx), ...
        'LineWidth', 2, ...
        'Color', [0 0 0],...
        'HitTest', 'off'...
        );
    GHandle.TempWindow.Channel(longIdx) = plot3(...
        xChannel(:,longIdx), ...
        yChannel(:,longIdx), ...
        zChannel(:,longIdx), ...
        'LineWidth', 2, ...
        'Color', [0 0 0],...
        'LineStyle', longLineStyle,...
        'HitTest', 'off'...
        );
    
end


GHandle.TempWindow.LandMark = plot3(...
    xLandMark(idxLM), yLandMark(idxLM), zLandMark(idxLM), ...
    'MarkerSize',20, ...
    'ButtonDownFcn',{@(Handle,Evnt)landmarkcallback(Handle,Evnt,GHandle)}, ...
    'LineStyle', 'none', ...
    'Visible', 'on', ...
    'Marker','.', ...
    'Color',landmarkColor, ...
    'Parent', GHandle.TempWindow.NewProbeAxes);


GHandle.TempWindow.Source = plot3(...
    xLandMark(idxSrc), yLandMark(idxSrc), zLandMark(idxSrc), ...
    'MarkerSize',20, ...
    'ButtonDownFcn',{@(Handle,Evnt)landmarkcallback(Handle,Evnt,GHandle)}, ...
    'LineStyle', 'none', ...
    'Visible', 'on', ...
    'Marker','.', ...
    'Color',sourceColor, ...
    'Parent', GHandle.TempWindow.NewProbeAxes);

% idxSrcBig = cellfun(@(c)strcmp(c, GHandle.TempWindow.SelectedAtlas.LandMarks.names), ...
%     sourceTag(GHandle.TempWindow.SourceList.Value), 'UniformOutput', false);
% idxSrcBig = squeeze(sum(cell2mat(arrayfun(@(x)permute(x{:},[3 1 2]),idxSrcBig,'UniformOutput',false)),1));
% idxSrcBig = logical(idxSrcBig(:));
idxSrcBig = endsWith(GHandle.TempWindow.SelectedAtlas.LandMarks.names, sourceTag(GHandle.TempWindow.SourceList.Value)) & ...
    startsWith(GHandle.TempWindow.SelectedAtlas.LandMarks.names, sourceTag(GHandle.TempWindow.SourceList.Value));

GHandle.TempWindow.SourceBig = plot3(...
    xLandMark(idxSrcBig), yLandMark(idxSrcBig), zLandMark(idxSrcBig), ...
    'MarkerSize',40, ...
    'ButtonDownFcn',{@(Handle,Evnt)landmarkcallback(Handle,Evnt,GHandle)}, ...
    'LineStyle', 'none', ...
    'Visible', 'on', ...
    'Marker','.', ...
    'Color',sourceColor, ...
    'Parent', GHandle.TempWindow.NewProbeAxes);

GHandle.TempWindow.Detector = plot3(...
    xLandMark(idxDet), yLandMark(idxDet), zLandMark(idxDet), ...
    'MarkerSize',20, ...
    'ButtonDownFcn',{@(Handle,Evnt)landmarkcallback(Handle,Evnt,GHandle)}, ...
    'LineStyle', 'none', ...
    'Visible', 'on', ...
    'Marker','.', ...
    'Color',detectorColor, ...
    'Parent', GHandle.TempWindow.NewProbeAxes);

% idxDetBig = cellfun(@(c)strcmp(c, GHandle.TempWindow.SelectedAtlas.LandMarks.names), ...
%     detectorTag(GHandle.TempWindow.DetectorList.Value), 'UniformOutput', false);
% idxDetBig = squeeze(sum(cell2mat(arrayfun(@(x)permute(x{:},[3 1 2]),idxDetBig,'UniformOutput',false)),1));
% idxDetBig = logical(idxDetBig(:));
idxDetBig = endsWith(GHandle.TempWindow.SelectedAtlas.LandMarks.names, detectorTag(GHandle.TempWindow.DetectorList.Value)) & ...
    startsWith(GHandle.TempWindow.SelectedAtlas.LandMarks.names, detectorTag(GHandle.TempWindow.DetectorList.Value));
GHandle.TempWindow.DetectorBig = plot3(...
    xLandMark(idxDetBig), yLandMark(idxDetBig), zLandMark(idxDetBig), ...
    'MarkerSize',40, ...
    'ButtonDownFcn',{@(Handle,Evnt)landmarkcallback(Handle,Evnt,GHandle)}, ...
    'LineStyle', 'none', ...
    'Visible', 'on', ...
    'Marker','.', ...
    'Color',detectorColor, ...
    'Parent', GHandle.TempWindow.NewProbeAxes);
end



